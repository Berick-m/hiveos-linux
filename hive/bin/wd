#!/usr/bin/env bash

[[ -t 1 ]] && . /hive/bin/colors


if [[ -z $RIG_CONF ]]; then #reread env variables as after upgrade this can be empty
	source /etc/environment
	export $(grep -vE '^$|^#' /etc/environment | cut -d= -f1) #export all variables from file
fi

# set minimum LA for watchdog to 2 * cores/threads + 1
#WD_MIN_LA=$(( $(nproc --all) * 2 + 1 ))
CORES=$(nproc --all)
WD_MIN_LA=$(( CORES + 5 ))
WD_DEF_LA=$(( CORES + 20 ))


WD_SLEEP=10 # seconds to sleep over iteration
OK_MESSAGE_REDUCE=$(( 1 * 60 / WD_SLEEP )) #e.g. only every 6th message will be displayed to reduce log
KHS_OLD=120 # seconds that considered old hashrate

LAST_STAT="/run/hive/last_stat.json"
DELAY_FILE="/run/hive/wd_delay"

wd_delay=0
la_inc=0
ok_count=0
check_count=0
gpu_err_count=0
gpu_power_count=0
high_la_count=0
miner_restart_count=0
miner_restart_timer=0
disable=0


now=
minhash=
wd_algo=
wd_miner=
prev_algo=
prev_miner=
prev_bench=
prev_modify_conf=
prev_flag_time=
badgpu_count=


function loadconf() {
	PUSH_INTERVAL=10
	WD_ENABLED=
	WD_MINHASHES_ALGO=
	WD_MINHASHES=
	WD_TYPE=
	WD_CHECK_CONN=
	WD_CHECK_GPU=
	WD_MINER=
	WD_REBOOT=
	WD_MAX_LA=
	MAINTENANCE=
	WD_POWER_ENABLED=
	WD_POWER_MIN=
	WD_POWER_MAX=
	WD_POWER_ACTION=

	local prev_disable=$disable

	if [[ ! -f $RIG_CONF ]]; then
		[[ $disable != 1 ]] && echo "${RED}Watchdog disabled: no config ($RIG_CONF)${NOCOLOR}"
		disable=1
		return
	fi

	source $RIG_CONF

	if [[ $WD_ENABLED != 1 ]]; then
		[[ $disable != 1 ]] && echo "${YELLOW}Watchdog disabled in config ($RIG_CONF)${NOCOLOR}"
		disable=1
		return
	fi

	if [[ ! -z $MAINTENANCE && $MAINTENANCE -gt 0 ]]; then
		[[ $disable != 1 ]] && echo "${YELLOW}Watchdog disabled: maintenance mode is enabled${NOCOLOR}"
		disable=1
		return
	fi

	if [[ ! -e $RUNNING_FLAG ]]; then
		[[ $disable != 1 ]] && echo "${YELLOW}Watchdog disabled: miner is not running${NOCOLOR}"
		disable=1
		return
	fi

	benchmark check > /dev/null 2>&1 && bench=1 || bench=0
	if [[ $bench == 1 ]]; then
		[[ $prev_bench != $bench ]] && echo "${RED}Watchdog disabled: detected running or unfinished benchmark${NOCOLOR}"
		prev_bench=$bench
		disable=1
		return
	fi

	[[ $prev_disable == 1 ]] && lastgood= && echo "${GREEN}Watchdog enabled${NOCOLOR}"
	disable=0

	miner_algo=
	map_algo=
	wd_miner=

	local changed_conf=0
	local changed_miner=0

	local modify_conf=`stat --printf %Y $RIG_CONF`
	if [[ $prev_modify_conf != $modify_conf ]]; then
		[[ ! -z $prev_modify_conf ]] && changed_conf=1 && miner_restart_count=0
		prev_modify_conf=$modify_conf
	fi

	local flag_time=`stat --printf %Y $RUNNING_FLAG`
	if [[ -z $prev_flag_time ]]; then
		wd_algo=$(< $RUNNING_FLAG)
		prev_flag_time=$flag_time
	elif [[ $prev_flag_time != $flag_time && $miner_restart_count -eq 0 ]]; then
		changed_miner=1
		wd_algo=
		rm $LAST_STAT 2>/dev/null
		prev_flag_time=$flag_time
	fi

	if [[ $WD_TYPE == algo ]]; then
		prev_miner=
		[[ -e $LAST_STAT ]] && miner_algo=`jq -r ".params.miner_stats.algo" $LAST_STAT 2>/dev/null`
		if [[ ! -z $miner_algo && $miner_algo != "null" ]]; then
			map="/hive/opt/algomap/"$MINER".json"
			[[ -e $map ]] && map_algo=`jq -r ".algomap.\"${miner_algo,,}\"" $map 2>/dev/null`
			[[ ! -z $map_algo && $map_algo != "null" ]] && wd_algo=$map_algo || wd_algo=$miner_algo
			[[ $wd_algo != $(< $RUNNING_FLAG) ]] && echo $wd_algo > $RUNNING_FLAG && prev_flag_time=$(stat --printf %Y $RUNNING_FLAG)
		fi
		minhash=`echo $WD_MINHASHES_ALGO | jq ".\"${wd_algo}\""`
	else
		prev_algo=
		if [[ ! -z $MINER ]]; then
			wd_miner=$MINER
			minhash=`echo $WD_MINHASHES | jq -r ".\"$MINER\""`
		fi
	fi

	if [[ -z $minhash || $minhash == "null" ]]; then
		if [[ $WD_TYPE == algo ]]; then
			if [[ -z $wd_algo ]]; then
				wd_algo=$MINER # use miner name if algo is unknown
				prev_algo=$wd_algo
			elif [[ $wd_algo != $prev_algo ]]; then
				message warn "$wd_algo minimal hashrate is not set" > /dev/null 2>&1
				echo "${RED}$wd_algo minimal hashrate is not set${NOCOLOR}"
				prev_algo=$wd_algo
			fi
		else
			if [[ $changed_conf -eq 1 && $MINER != $prev_miner ]]; then
				message warn "$MINER minimal hashrate is not set" > /dev/null 2>&1 &&
				echo "${RED}$MINER minimal hashrate is not set${NOCOLOR}"
				prev_miner=$MINER
			fi
		fi
	fi

	[[ $changed_conf -eq 1 || $changed_miner -eq 1 || -z $lastgood ]] && set_lastgood && now=
}


function set_lastgood() {
	#lastgood=`date +%s`
	[[ -e $HASHRATE_KHS ]] &&
		lastgood=`stat -c %Y $HASHRATE_KHS` ||
		#lastgood=0 can't set it to 0, in case of boot agent may be late
		lastgood=`date +%s` #let's count from now

	miner_restart_count=0
}


function get_gpu_info() {
	jq --slurp -r '.[] | .busids as $b | .temp as $t | .fan as $f | .power as $p | reduce range(0; $b|length) as $i
		([]; . + [[$b[$i], $t[$i], $f[$i], $p[$i]]] ) | .[] | .[0]+"  Temp: "+.[1]+"C  Fan: "+.[2]+"%  Power: "+.[3]+"W"' $GPU_STATS_JSON 2>/dev/null
	dmesg -Tk | tail -n 300 | grep "Xid"
	[[ -z "$1" ]] && return 0
	COLUMNS=110 top -bHn 1 | head -n 20
	return 0
}


function check_la() {
	local rq_count=`ps -e o stat,args | grep -cP "^R[^\[]+$"` # run queue proc count
	[[ $rq_count -gt 5 && $rq_count -gt $la_inc ]] && la_inc=$(( rq_count - 1 )) &&
		echo "${YELLOW}Increasing LA limit by $la_inc${NOCOLOR}"
	local max_la=${WD_MAX_LA:-$WD_DEF_LA}
	[[ $max_la -lt $WD_MIN_LA ]] && max_la=$WD_MIN_LA
	max_la=$(( max_la + la_inc ))
	local max_la2x=$(( max_la * 2 ))
	read la1 la5 la15 procs < /proc/loadavg
	# reboot immediately if LA (5 min) >= maxLA
	if [[ ${la5%.*} -ge $max_la ]]; then
		echo "${RED}LA is more than ${max_la}.0: $la5, rebooting ${NOCOLOR}"
		get_gpu_info | message error "LA > $max_la, rebooting" payload >/dev/null
		sreboot fast
	# reboot if LA (1 min) >= maxLA * 2
	elif [[ ${la1%.*} -ge $max_la2x ]]; then
		# check few times to avoid short peaks
		if [[ $high_la_count -ge 2 ]]; then
			echo "${RED}LA(1m) $la1 > ${max_la2x}.0, rebooting ${NOCOLOR}"
			get_gpu_info | message error "LA > $max_la2x, rebooting" payload >/dev/null
			sreboot fast
		else
			echo "${RED}LA(1m): $la1 > ${max_la2x}.0, waiting ${NOCOLOR}"
			[[ $high_la_count -eq 0 ]] && get_gpu_info | message warning "LA > $max_la2x" payload >/dev/null
		fi
		((high_la_count++))
	else
		high_la_count=0
		[[ $check_count == 0 ]] &&
			echo "${GREEN}OK${NOCOLOR} LA(5m): $la5 < ${max_la}.0, LA(1m): $la1 < ${max_la2x}.0"
	fi

	[[ $la_inc -gt 0 ]] && ((la_inc--))
}


function check_gpu() {
	# reread gpu_detect only on change
	local ts=`stat -c %Y $GPU_DETECT_JSON 2>/dev/null`
	if [[ ! -z $ts && $gpu_detect_time -ne $ts ]]; then
		gpu_detect_time=$ts
		badgpu_count=`jq -r '[ .[] | .brand | select(.=="cpu") ] | length' $GPU_DETECT_JSON 2>/dev/null`
	fi

	# check gpu-stats for gpu count
	local current_count
	current_count=`jq -r '[ .brand | .[] | select(.=="cpu") ] | length' $GPU_STATS_JSON 2>/dev/null`
	if [[ $? -ne 0 || -z $current_count || ( ! -z $badgpu_count && $current_count -gt $badgpu_count ) ]]; then
		# check few times to be sure
		if [[ $gpu_err_count -ge 3 ]]; then
			echo "${RED}GPU are lost, rebooting ${NOCOLOR}"
			get_gpu_info | message error "GPU are lost, rebooting" payload >/dev/null
			sreboot
		else
			echo "${RED}GPU are lost, waiting ${NOCOLOR}"
			#[[ $gpu_err_count -eq 0 ]] && get_gpu_info | message warning "GPU are lost" payload >/dev/null
		fi
		((gpu_err_count++))
	else
		gpu_err_count=0
	fi
}


function check_power() {
	local msg=
	local critical=0
	totalpower=`jq -r '[ .power | .[] | tonumber ] | add' $GPU_STATS_JSON 2>/dev/null`
	if [[ $? -ne 0 ]]; then
		msg="Unable to get power usage"
	elif [[ $totalpower -gt 10000 && $WD_POWER_MAX -lt 10000 ]]; then
		msg="incorrect ${totalpower}W"
	elif [[ $WD_POWER_MIN -gt 0 && $totalpower -lt $WD_POWER_MIN ]]; then
		msg="${totalpower}W < ${WD_POWER_MIN}W"
		critical=1
	elif [[ $WD_POWER_MAX -gt $WD_POWER_MIN && $totalpower -gt $WD_POWER_MAX ]]; then
		msg="${totalpower}W > ${WD_POWER_MAX}W${NOCOLOR}"
		critical=1
	else
		[[ $check_count == 0 ]] &&
			echo "${GREEN}OK${NOCOLOR} POWER: ${WHITE}$totalpower W${NOCOLOR} (${WD_POWER_MIN:-0}..${WD_POWER_MAX:-9999} W)"
		gpu_power_count=0
		return
	fi
	if [[ $critical -eq 0 ]]; then
		echo "${YELLOW}GPU POWER: $msg${NOCOLOR}"
		return
	fi
	echo "${RED}GPU POWER: $msg${NOCOLOR}"
	if [[ $gpu_power_count -eq 3 ]]; then
			get_gpu_info | message warn "GPU power $msg" payload >/dev/null
	elif [[ $gpu_power_count -ge 6 ]]; then
		get_gpu_info | message error "GPU power $msg, rebooting" payload >/dev/null
		#WD_POWER_ACTION
		sreboot
	fi
	((gpu_power_count++))
}


function loop() {
	#echo -n "[`date`] "

	# check every 2nd interval, ie 20 sec
	if [[ $(( check_count % 2 )) == 0 ]]; then
		[[ ${WD_MAX_LA:-$WD_DEF_LA} -ge 1 ]] && check_la
		# do not check in maintenance mode
		[[ "$WD_CHECK_GPU" == 1 && $MAINTENANCE -eq 0 ]] && check_gpu
		# do not check power if watchdog is disabled
		[[ $disable -eq 0 && "$WD_POWER_ENABLED" == 1 ]] && check_power
	fi
	((check_count++))
	[[ $check_count -ge $OK_MESSAGE_REDUCE ]] && check_count=0

	if [[ $disable -eq 1 || ($WD_TYPE == algo && -z $wd_algo) ]]; then
		[[ -f $DELAY_FILE ]] && echo "Ignoring delay" && rm -f $DELAY_FILE
		wd_delay=0
		return
	fi

	if [[ -f $DELAY_FILE ]]; then
		wd_delay="$(< $DELAY_FILE )"
		rm -f $DELAY_FILE
		echo "Adding delay: ${wd_delay}s"
		SECONDS=0
	fi

	[[ $WD_TYPE == algo ]] && local wd_name=$wd_algo || local wd_name=$wd_miner

	local new=`date +%s`
	# check and adjust time if changed too much
	if [[ ! -z $now ]]; then
		local diff=$(( new - now - WD_SLEEP ))
		# must be 0 in most cases. adjust if diff is more than 2x sleep time
		if [[ $diff -lt $(( -2*WD_SLEEP )) || $diff -gt $(( 2*WD_SLEEP )) ]]; then
			echo "Adjusting time: ${diff}s"
			if [[ -e $HASHRATE_KHS ]]; then
				local old=$( stat -c %Y $HASHRATE_KHS )
				[[ $old == $lastgood || ( $old -ge $now && $old -le $(( now + WD_SLEEP )) ) ]] &&
					touch -c -m --date=@$(( old + diff )) $HASHRATE_KHS
			fi
			lastgood=$(( $lastgood + $diff ))
		fi
	fi
	now=$new

	local elapsed=$(( now - lastgood ))
	#echo Elapsed $elapsed seconds

	local khs=
	if [[ -e $HASHRATE_KHS ]]; then
		khs=$( < $HASHRATE_KHS)
		if [[ $elapsed -gt $KHS_OLD && $(( now - `stat -c %Y $HASHRATE_KHS` )) -gt $KHS_OLD ]]; then
			echo "${YELLOW}Hashrate value was not updated > $KHS_OLD sec, ignoring${NOCOLOR}"
			khs=0
		fi
	fi
	[[ -z $khs ]] && khs=0

	local hashok=
	if [[ -z $minhash || $minhash == "null" ]]; then
		[[ $WD_TYPE != algo ]] && return
		[[ ${khs%.*} -gt 0 ]] &&
			hashok=1 ||
			hashok=`echo "$khs" | awk '{ print ($1 > 0) ? 1 : 0 }'` # float comparison
		local hashmore="> 0"
		local hashless="= 0"
	else
		[[ ${khs%.*} -gt ${minhash%.*} ]] &&
			hashok=1 ||
			hashok=`echo "$khs" "$minhash" | awk '{ print ($1 >= $2) ? 1 : 0 }'` # float comparison
		local hashmore=">= $minhash kHs"
		local hashless="< $minhash kHs"
	fi

	if [[ $hashok == 1 ]]; then
		set_lastgood
		[[ $ok_count == 0 ]] && echo "${GREEN}OK${NOCOLOR} ${CYAN}$wd_name${NOCOLOR} $khs kHs $hashmore"

		((ok_count++))
		[[ $ok_count -ge $OK_MESSAGE_REDUCE ]] && ok_count=0

		miner_restart_timer=0
		return
	fi

	if [[ "$WD_CHECK_CONN" == "1" ]]; then
		local last_ok=`stat -c%Y $LAST_OK_FILE 2>/dev/null`
		local diff=$(( now - last_ok ))
		if [[ $last_ok -ne 0 && $diff -gt 60 && $diff -gt $(( PUSH_INTERVAL*3 )) ]]; then
			echo "${YELLOW}NO CONNECTION${NOCOLOR} for $diff seconds"
			# reset last hash time so miner has some time after connection resumption
			set_lastgood
			# use restart timeout with max limit 10 min
			miner_restart_timeout=`echo $WD_MINER 60 | awk '{print int($1*$2)}'`
			[[ $miner_restart_timeout -gt 600 ]] && miner_restart_timeout=600
			# restart miner to reduce power usage without connection
			((miner_restart_timer++))
			if [[ $(( miner_restart_timer * WD_SLEEP )) -gt $miner_restart_timeout ]]; then
				echo "---"
				echo "${YELLOW}Restarting ${CYAN}$wd_name${NOCOLOR} ${YELLOW}after $miner_restart_timeout seconds${NOCOLOR}"
				echo "---"
				miner restart
				miner_restart_timer=0
			fi
			return
		fi
	fi

	echo "${RED}BARK${NOCOLOR} ${CYAN}$wd_name${NOCOLOR} $khs kHs $hashless for $elapsed seconds"

	if [[ $wd_delay -gt 0 && $SECONDS -gt $wd_delay ]]; then
		echo "Delay was applied"
		wd_delay=0
		set_lastgood
		return
	fi

	# check to reboot first
	if [[ ! -z $WD_REBOOT ]]; then
		reboot_timeout=`echo $WD_REBOOT 60 | awk '{print int($1*$2)}'`
		if [[ $elapsed -ge $reboot_timeout ]]; then
			miner log | message danger "$wd_name low hashrate ($khs kH/s), rebooting" payload
			echo "---"
			echo "${RED}Rebooting after $WD_REBOOT minutes${NOCOLOR}"
			echo "---"
			#nohup bash -c 'sreboot' > /tmp/nohup.log 2>&1 &
			sreboot
			return #for testing and if it does not work)
		fi
	fi

	# check to restart miner
	if [[ ! -z $WD_MINER ]]; then
		miner_restart_timeout=`echo $WD_MINER 60 | awk '{print int($1*$2)}'`
		if [[ $miner_restart_count == 0 && $elapsed -ge $miner_restart_timeout ]]; then
			miner log | message warn "$wd_name low hashrate ($khs kH/s), restarting" payload
			echo "---"
			echo "${YELLOW}Restarting ${CYAN}$wd_name${NOCOLOR} ${YELLOW}after $WD_MINER minutes${NOCOLOR}"
			echo "---"
			miner_restart_count=1
			miner restart
		fi
	fi
}

function run() {

	set_lastgood

	loadconf

	echo "MINER RESTART:     $WD_MINER minutes"
	echo "REBOOT:            $WD_REBOOT minutes"

	[[ "$WD_CHECK_CONN" == 1 ]] &&
		echo "CHECK CONNECTION:  Enabled"
	[[ "$WD_CHECK_GPU" == 1 ]] &&
		echo "CHECK GPU OFFLINE: Enabled"
	[[ "$WD_POWER_ENABLED" == 1 ]] &&
		echo "CHECK GPU POWER:   ${WD_POWER_MIN:-0}..${WD_POWER_MAX:-9999} W" #${WD_POWER_ACTION:-reboot}
	[[ ${WD_MAX_LA:-$WD_DEF_LA} -ge 1 ]] &&
		echo "MAX LOAD AVERAGE:  $WD_MAX_LA.0 (min $WD_MIN_LA.0, def $WD_DEF_LA.0)"

	while true; do
		loop
		sleep $WD_SLEEP
		loadconf
	done
}

########################################################################################################################

case $1 in
	run)
		run
	;;
	stop)
		systemctl stop hive-watchdog
	;;
	start)
		systemctl status hive-watchdog > /dev/null 2>&1 || systemctl start hive-watchdog
	;;
	restart)
		systemctl restart hive-watchdog
	;;
	log)
		journalctl -u hive-watchdog -b --no-pager $2 $3 $4 $5 $6 $7 | tail -n 100
	;;
	delay)
		[[ ! "$2" =~ ^[0-9]+$ ]] && echo "Invalid delay specified" || echo "$2" > $DELAY_FILE
	;;
	status)
		systemctl status hive-watchdog
	;;
	*)
		bname=`basename $0`
		echo "${YELLOW}Hashrate Watchdog${NOCOLOR}"
		echo "Usage: ${CYAN}$bname start|stop|restart|log|status|delay SECONDS${NOCOLOR}"
	;;
esac
