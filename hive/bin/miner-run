#!/usr/bin/env bash

. colors

export DEBIAN_FRONTEND=noninteractive
export LD_LIBRARY_PATH=/hive/lib


# miner minimal work time in seconds for log rotation
MINER_LOG_MIN_TIME=30

echo 500 > /proc/self/oom_score_adj

[[ ! -e $RIG_CONF ]] && echo "${RED}No rig config $RIG_CONF${NOCOLOR}" && exit 1
[[ ! -e $WALLET_CONF ]] && echo "${RED}No wallet config $WALLET_CONF${NOCOLOR}" && exit 1

source $RIG_CONF
source $WALLET_CONF


# Check arguments and miner
MINER_NAME="$1"
MINER_CMD="$2"
[[ -z $MINER_NAME ]] && echo "${RED}Give some miner name${NOCOLOR}" && exit 1


# Check base miner package ==========================================================================

function hive-package-install-do () {
	local package_name=$1
	apt-wait
	apt-get install -y $package_name 2>&1 | tee /tmp/package-install.log
	return ${PIPESTATUS[0]}
}


function hive-package-install () {
	local package_name=$1
	dpkg -s $package_name > /dev/null 2>&1
	if [[ $? -ne 0 ]]; then
		echo "${YELLOW}Installing $package_name${NOCOLOR}"
		# stop watchdog while installing packages
		#local wd=$(wd status | grep -c running)
		#[[ $wd -ne 0 ]] && wd stop
		#dpkg --configure -a
		hpkg fix
		hpkg update
		hive-package-install-do $package_name
		if [[ $? -ne 0 ]]; then
			#Second try
			sleep 1
			hive-package-install-do $package_name
			if [[ $? -ne 0 ]]; then
				# repover-touch #don't touch as we did not update all packages
				cat /tmp/package-install.log | message error "Error installing $package_name" payload
				# restore anyway
				#[[ $wd -ne 0 ]] && wd start
				return 1
			fi
		fi
		apt-get clean
		# restore after install
		#[[ $wd -ne 0 ]] && wd start
	fi
	return 0
}


# Checks in target of symlink exists
function mkfile_from_symlink() {
	[[ -z $1 ]] && return 1
	[[ ! -L $1 ]] && return 1 #not a symlink
	[[ -e $1 ]] && return 0 #symlink point to existing file
	local f=`readlink "$1"`
	local d=`dirname "$f"`
	[[ ! -d $d ]] && mkdir -p "$d" #&& echo "Creating $d"
	touch $f #&& echo "Touching $f"
	chown -R user "$d"
}


function rmfile_from_symlink() {
	[[ -z $1 ]] && return 0 #does not exist
	if [[ ! -L $1 ]]; then #not a symlink
		rm $1
		#echo "Deleting $1"
		return 0
	fi
	local f=`readlink "$1"`
	[[ -e $f ]] && rm $f #&& echo "Deleting $f" #symlink point to existing file
}


function setup_miner() {
	cd $MINER_DIR

	source $MINER_DIR/h-manifest.conf
	source $MINER_DIR/h-config.sh

	# exports needed by envsubst
	declare -fF miner_fork > /dev/null && #if function exists
		export MINER_FORK=`miner_fork` ||
		export MINER_FORK=
	export MINER_VER=`miner_ver`
	export MINER_API_PORT
	export MINER_LOG_BASENAME

	echo "Miner:   ${CYAN}$MINER_NAME${NOCOLOR}"
	[[ ! -z $MINER_FORK ]] && echo "Fork:    ${YELLOW}$MINER_FORK${NOCOLOR}"
	[[ ! -z $MINER_VER ]] && echo "Version: ${YELLOW}$MINER_VER${NOCOLOR}"
	echo

	# Check actual miner's package
	if [[ ! -z $MINER_FORK ]]; then #install package of fork
		package_name+="-"${MINER_FORK//_/-}
		hive-package-install $package_name || return $?
	fi
	if [[ ! -z $MINER_VER ]]; then #check version package
		package_name+="-"${MINER_VER//_/-}
		hive-package-install $package_name || return $?
	fi

	# used in benchmark. exiting before config generation
	[[ "$MINER_CMD" == "install" ]] && return 0

	# Generate config files after package is installed
	miner_config_gen
}


function run_miner() {
	LIBCURL3_COMPAT=

	cd $MINER_DIR

	source $MINER_DIR/h-manifest.conf
	source $MINER_DIR/h-config.sh

	# exports needed by envsubst
	declare -fF miner_fork > /dev/null && #if function exists
		export MINER_FORK=`miner_fork` ||
		export MINER_FORK=
	export MINER_VER=`miner_ver`
	export MINER_API_PORT
	export MINER_LOG_BASENAME

	# Ubuntu 18.04 compat
	[[ $LIBCURL3_COMPAT == 1 && -e /usr/lib/x86_64-linux-gnu/libcurl-compat.so.3.0.0 ]] &&
		export LD_PRELOAD=libcurl-compat.so.3.0.0

	# Drop TIME_WAIT sockets
	if [[ ! -z $MINER_API_PORT && -f /proc/net/tcpdropsock ]]; then
		echo ""
		while true; do
			sockets=$(netstat -n | grep ":$MINER_API_PORT " | grep WAIT)
			[[ -z "$sockets" ]] && break
			echo -e "${WHITE}Trying to release TIME_WAIT sockets:${NOCOLOR}\n$sockets\n"
			echo "$sockets" | awk '{print $4"\t"$5}' >/proc/net/tcpdropsock
			sleep 1
		done
	fi

	# start miner
	source $MINER_DIR/h-run.sh
}


# install miner root package
package_name="hive-miners-$MINER_NAME"
hive-package-install $package_name || exit $?

# check control files
MINER_DIR=/hive/miners/$MINER_NAME
[[ ! -e $MINER_DIR ]] && echo "${RED}$MINER_DIR does not exist, check miner installation${NOCOLOR}" && exit 1
[[ ! -e $MINER_DIR/h-manifest.conf ]] && echo "${RED}No $MINER_DIR/h-manifest.conf${NOCOLOR}" && exit 1
[[ ! -e $MINER_DIR/h-config.sh ]] && echo "${RED}No h-config.sh found for $MINER_NAME${NOCOLOR}" && exit 1
[[ ! -e $MINER_DIR/h-run.sh ]] && echo "${RED}$MINER_DIR/h-run.sh is not implemented${NOCOLOR}" && exit 1

# define default fallback value
[[ -z $MINER_LOG_BASENAME ]] && MINER_LOG_BASENAME=/var/log/miner/$MINER_NAME/$MINER_NAME

# install miner and generate config, in subshell
( setup_miner ) || exit $?

# used in benchmark to install miners packages
[[ "$MINER_CMD" == "install" ]] && exit 0

# start watchdog here for primary miner
[[ "$MINER_NAME" == "$MINER" ]] && touch $RUNNING_FLAG

miner_start_ts=0

while true; do
	# do not rotate logs if miner restarts quickly to keep old logs
	[[ $(date +%s) -lt $(( miner_start_ts + MINER_LOG_MIN_TIME )) ]] &&
   		echo "${GRAY}Skipping miner log rotation due to execution time < ${MINER_LOG_MIN_TIME}sec${NOCOLOR}" ||
		miner logrotate $MINER_NAME
	
	miner_start_ts=$(date +%s)

	# prevent Ctrl+C from killing screen. only killing miner for first time
	trap 'echo ""' SIGINT

	# run miner, in subshell
	( run_miner )
	exitcode=$?

	# exit loop if miner stop exists
	[[ ! -z $MINER_STOP && -f $MINER_STOP ]] && break

	# allow Ctrl+C again
	trap - SIGINT

	echo -e "\n${BYELLOW}$MINER_NAME${YELLOW} exited (exitcode=$exitcode), waiting to cooldown a bit${NOCOLOR}\n"
	sleep 3
done

exit $exitcode
