#!/usr/bin/env bash
# Sends messages to server


if [[ -z "$RIG_CONF" || -z "$API_HOST_FILE" ]]; then #reread env variables as after upgrade this can be empty
	source /etc/environment
	export $(cat /etc/environment | grep -vE '^$|^#' | cut -d= -f1) #export all variables from file
fi


. /hive/bin/colors

[ ! -f $RIG_CONF ] && echo -e "No config $RIG_CONF" && exit 1
. $RIG_CONF

[[ -e "$API_HOST_FILE" ]] && source $API_HOST_FILE # fallback api host
HIVE_URL="$HIVE_HOST_URL/worker/api"
LOG="/var/log/hive-agent.log"

if [[ $1 == -f=* || $1 == --file=* ]]; then
	type="file"
	file="${1#*=}"
	[[ ! -e $file ]] && echo "File not found: \"$file\"" && exit 1
	data=`basename "$file"`
else
	type="$1"
	data="$2"
fi

#echo $#
if [[ -z $data || -z $type ]]; then
	echo "Usage: $0 success|danger|warning|info|file \"message\" [-i|--id=msgid] [-f|--file=path/name] [payload]"
	echo "       $0 -f|--file=path/name"
	echo "Aliases: ok|error|err|warn|default"
	echo "payload is read from stdin"
	exit 1
fi

MSGCOLOR=$CYAN
[[ $type == "error" || $type == "err" ]] && type="danger" && MSGCOLOR=$RED
[[ $type == "warn" ]] && type="warning" && MSGCOLOR=$YELLOW
[[ $type == "ok" ]] && type="success" && MSGCOLOR=$GREEN


#sending blink command to octofan in case of errors
[[ `lsusb | grep -c 16c0:05dc` -ge 1 && $type == "danger" && -e $OCTOFAN ]] && $OCTOFAN blink_error

request=$(
echo "$payload_json" | jq -n \
--arg rig_id "$RIG_ID" \
--arg passwd "$RIG_PASSWD" \
--arg type "$type" \
--arg data "$data" \
'{
	"method": "message", "jsonrpc": "2.0", "id": 0,
	"params": {$rig_id, $passwd, $type, $data}
}'
)
#echo $request | jq .

id=
payload_json=
for i in "$@"; do
	case $i in
		-i=*|--id=*)
			id="${i#*=}"
			id_json=`jq --arg id "$id" -n '{"params": {$id}}'`
			request=`echo "$request $id_json" | jq -sc '.[0] * .[1]'`
		;;
		--meta=*)
			meta="${i#*=}"
			echo $meta | jq
			meta_json=`jq --argjson meta "$meta" -n '{"params": {$meta}}'`
			request=`echo "$request $meta_json" | jq -sc '.[0] * .[1]'`
		;;
		payload|--payload)
			#echo "With payload"
			# cleanup output from progress bars
			#payload=$(sed 's/\r$//; s/\r/\r\n/g' | grep -v $'\r' | cat -s)
			# check for empty payload
			#if [[ "$payload" =~ [^[:space:]]+ ]]; then
			#	payload_json=`echo -n "$payload" | jq -R -s '{"params": {"payload": .}}'` &&
			#		request=`echo "$request $payload_json" | jq -sc '.[0] * .[1]'`
			#fi
		;;
		-f=*|--file=*)
			[[ $type != "file" ]] && echo "Type \"file\" must be used" && exit 2
			file="${i#*=}"
			[[ ! -e $file ]] && echo "File not found: \"$file\"" && exit 1
			payload_json=`cat "$file" | gzip -9 --stdout | base64 -w 0 | jq -R -s '{"params": {"payload": .}}'` &&
				request=`echo "$request $payload_json" | jq -sc '.[0] * .[1]'`
		;;
		*)
			# unknown option
		;;
	esac
done

# autodetect payload
if [[ ! `readlink /dev/fd/0` =~  ^/dev/ ]]; then
	#echo "With payload"
	# cleanup output from progress bars
	payload=$(sed 's/\r$//; s/\r/\r\n/g' 2>/dev/null | grep -v $'\r' | cat -s)
	# check for empty payload
	if [[ "$payload" =~ [^[:space:]]+ ]]; then
		payload_json=`echo -n "$payload" | jq -R -s '{"params": {"payload": .}}'` &&
			request=`echo "$request $payload_json" | jq -sc '.[0] * .[1]'`
	fi
fi

#date
echo -e "> Sending ${payload_json:+with payload }\"$type\": ${MSGCOLOR}$data${NOCOLOR}"
#echo $request
echo "$request" | jq -c --arg pass "${RIG_PASSWD//?/*}" '.params.passwd=$pass | if .params.payload then .params.payload |= "[\(.|length) bytes]" else . end'
#Show output and exit for debug
#echo $request | jq . && exit

#[ $? -ne 0 ] && echo "Error formatting JSON message" && exit 1

echo "[`date`] > `echo $request | jq . -c`" >> $LOG
#echo "[`date`] > $request" >> $LOG

response=$(echo "$request" | curl --insecure -L --data @- \
--connect-timeout 7 --max-time 15 --silent \
-XPOST "${HIVE_URL}?id_rig=$RIG_ID&method=message"  -H "Content-Type: application/json")

exitcode=$?
if [ $exitcode -ne 0 ]; then
	echo "Error sending message (curl code=$exitcode)"
	echo "[`date`] < Error sending message (curl code=$exitcode)" >> $LOG
	exit $exitcode
fi

#echo "[`date`] < $response" >> $LOG
parsed=`echo "$response" | jq . -c 2>/dev/null`
if [[ $? -ne 0 ]]; then
	error=`echo "$response" | grep -oP "<title>\K[^<]+"` && echo -e "${RED}Error:$NOCOLOR $error" || echo "$response"
	exit 1
fi

echo "[`date`] < $response" >> $LOG
error=`echo "$response" | jq '.error' --raw-output`
[[ ! -z $error && $error != "null" ]] && echo -e "${RED}Error response:$NOCOLOR $error" && exit 1

exit 0
